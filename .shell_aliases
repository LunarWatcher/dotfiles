# Globals {{{
local loc=$(readlink ~/.zshrc)
export DOTFILES_HOME=$(dirname $loc)
export PATH=$DOTFILES_HOME/scripts:$PATH
# }}}
# Builtins {{{
# ls without colors for dipshit 777 disks
# The colorscheme makes 777 folders literally unreadable
alias lsn="ls --color=no"

alias open="xdg-open"
# }}}
# Git {{{
alias gi="git init"
alias subclone="git submodule update --init --recursive"
alias gitdeep="git clone --recursive"
alias gitgraph="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"
alias gitsign="git config commit.gpgsign true"
alias gsi="git submodule update --init"
alias gcget="git config --get"
alias grhu='git reset --hard origin/$(git branch --show-current)'
alias grh="git reset --hard"
alias gra="git commit --amend --no-edit"
alias gai="git add -i"
alias ga="git add -A"
alias groot="git rev-parse --show-toplevel"

function ghsclone() {
    if [[ "$1" == "" ]]; then
        echo "Clone what?"
        return -1
    fi;

    git clone "git@github.com:$1"
}

function git-mirror-config-cb-source() {
    codebergUrl=$(git remote get-url --push origin)
    ghUrl=${codebergUrl/codeberg.org/github.com}

    git remote set-url --add --push origin ${codebergUrl}
    git remote set-url --add --push origin ${ghUrl}
}

function git-mirror-config-gh-source() {
    ghUrl=$(git remote get-url --push origin)
    codebergUrl=${ghUrl/github.com/codeberg.org}

    git remote set-url --add --push origin ${ghUrl}
    git remote set-url --add --push origin ${codebergUrl}
}

# }}}
# Exposing various binaries {{{
alias themis="~/.vim/plugged/vim-themis/bin/themis"
# }}}
# Hardware {{{
alias noiturbo="echo '1' | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo"
alias iturbo="echo '0' | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo"
alias pulsenodio="pulseaudio -k && sudo alsa force-reload"
alias pipenodio="systemctl --user restart pipewire"
alias fix-bluetooth="pactl unload-module module-bluetooth-discover && pactl load-module module-bluetooth-discover"
# }}}
# Pyenv {{{
alias newpyenv="virtualenv env && source ./env/bin/activate"
# }}}
# Vim {{{
# Hack for gvim: source the pyenv so gvim can access it.
# Workaround in my current dotfiles: :SetVEnv in gvim
# All output is then piped into good 'ol /dev/null because it
# usually spews out bullshit anyway
alias pygvim="source ./env/bin/activate && gvim . > /dev/null 2>&1"
alias pyenv="source ./env/bin/activate"
# }}}
# System {{{
alias sysupdate="sudo apt update && sudo apt upgrade && flatpak update"

# Updates various packages that aren't managed by apt or flatpak.
# This can include stuff _completely_ excluded from other package managers,
# package managers for different programs, or second-class package managers
# (like pip).
function updatePackages() {
    set -x
    go install -v -u github.com/boyter/scc/
    git -C ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k pull
    # Not quitting afterwards in the event something goes wrong
    gvim +PlugUpdate
    set +x
}
# }}}
# Tmux {{{
# **tmux n**ame
alias tmuxn="tmux new-session -t"
# }}}
# Docker {{{
# Start and stop the service
alias rdocker="sudo systemctl start docker"
alias sdocker="sudo systemctl stop docker"

# Temporary docker container (deletes itself)
alias dockertmp="docker run --rm -ti"

# Permanent, named docker container without disconnect
alias dockern="docker run -di --name"

# Shortcut to interactive session
alias dex="docker exec -ti"
alias dstart="docker start"
alias dstop="docker stop"
alias drm="docker rm"

alias powershelldocker="docker run -ti --rm mcr.microsoft.com/powershell:latest"
# }}}
# ffmpeg {{{
# convert standalone MP3s to spotify-compatible audio levels
alias normalize-all-audio="ffmpeg-normalize *.mp3 -c:a libmp3lame -ext mp3 -b:a 320k -f -t -14"
alias normalize-audio="ffmpeg-normalize -c:a libmp3lame -ext mp3 -b:a 320k -f -t -14"
function mkv2mp3() {
    if [[ "$1" == "" || "$2" == "" ]]; then
        echo "Usage: mkv2mp3 src.mkv dest.mp3"
        return -2
    fi
    ffmpeg -i $1 -map 0:a:0 -b:a 320k $2
}
# }}}
# asciinema extensions {{{

function asciinemaProfile() {
    if [[ -n "$1" ]]; then
        ln -sf $HOME/.config/asciinema/install-id-$1 $HOME/.config/asciinema/install-id
    else
        echo "Specify which profile to use"
    fi
}
# }}}
# sshd aliases {{{
alias breach-attempts="sudo fail2ban-client status sshd"
alias sshd-auths="cat /var/log/auth.log | grep sshd"

# Stats on usernames
alias sshd-auth-bad="cat /var/log/auth.log | grep sshd | grep 'invalid user'"
# No need to check root, the config has it as an invalid user

# }}}
# ssh {{{
alias sshd-restart="sudo systemctl restart ssh"
# }}}
# Command shortening {{{
function mkcd() {
    if [[ "$1" != "" ]]; then
        mkdir -p $1 && cd $1
    else
        echo "Create what?"
    fi
}
function cleanmk() {
    if [[ "$1" != "" && "$1" != "/" ]]; then
        rm -rf $1 && mkdir $1 && cd $1
    else
        echo "Invalid path, or path was root (rm-ing root is bad!)"
    fi
}
# }}}
# CMake/make {{{
alias cmaker="cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=1"
alias cmaked="cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=1"
alias fmake='make -j $(nproc)'
# }}}
# Network fuckery {{{
# Only enabled on pihole-enabled devices or my devices in general, because this is aimed at my home network only,
# and remoting into my home network.
#
# TODO merge these into a single function
if [[ `( nmcli dev list || nmcli dev show ) 2>/dev/null | grep IP4.DNS | grep 192.168.0.179` != '' ]]; then
    function nasmountall() {
        sshfs olivia@nova.lan:/media/NAS /media/NAS
    }
else
    function nasmountall() {
        sshfs olivia@nova.remote:/media/NAS /media/NAS
    }
fi
if [[ $USER == "olivia" ]]; then
    # Equivalent to nasmountall, but takes a single IP as input
    # The IP has to be manually configured in ~/.ssh/config first.
    function nasmountremote() {
        sshfs olivia@${1:-nova.remote}:/media/NAS /media/NAS
        #sshfs olivia@${1:-nova.remote}:/media/NAS1 /media/NAS1

    }

    function nasumount() {
        umount /media/NAS
    }

fi
# }}}
# WSL bullshit {{{
if [[ $(grep -i Microsoft /proc/version) ]]; then
    # No automatic services (TODO: outdated?)
    function bootstrapenv() {
        sudo service postgresql start
    }
fi
# }}}
# Gpg {{{
alias gpgsign="gpg --clearsign "

function gpgsend() {
    if [[ $1 == "" || $2 == "" || $1 == "--help" ]]; then
        echo "Usage: gpgsend email message-file"
        return 0
    fi

    gpg --sign --encrypt --recipient $1 $2
}

function gpgexport() {
    if [[ $1 == "" || $2 == "" || $1 == "--help" ]]; then
        echo "Usage: gpgexport output-path email"
        return 0
    fi
    gpg --output $1 --armor --export $2
}
# }}}
# Ssh keygen and key admin {{{
function ssh-fixperms() {
    chmod 600 ~/.ssh/*
    chmod 700 ~/.ssh
}

function o-ssh-keygen() {
    if [[ "$1" == "" || "$2" == "" ]]; then
        echo "Usage: o-ssh-keygen [email] [file name]" 
        return -1
    fi

    ssh-keygen -t ed25519 -C $1 -f ~/.ssh/$2

    echo "Copy this line to whereever you need access:"
    cat ~/.ssh/$2.pub
}
# }}}
# Project utilities {{{
alias open-doxygen="open ./html/index.html"
# }}}
# Testing utils {{{
function display-wrap() {
    Xvfb :10 -ac -screen 0 1280x1024x24 >/dev/null 2>&1 &
    mockDisplayPid=$!
    DISPLAY=:10 zsh -ic "$*"

    kill $mockDisplayPid
}
# }}}
# Ubuntu stuff {{{
alias pbi="pip3 install --break-system-packages "
alias pbu="pip3 uninstall --break-system-packages "
# }}}
# PSQL {{{
alias psql-update='sudo -u postgres psql -c "ALTER DATABASE postgres REFRESH COLLATION VERSION"'
alias spsql='sudo -u postgres psql '
# }}}
# yt-dlp {{{
alias ytmp3="yt-dlp -x --audio-format mp3 "
# }}}
# gdb {{{
alias gdb="gdb --tui "
# }}}
# Gradle {{{
# Exists because gradle spews out so much fucking shit that my terminal
# physically cannot contain its output. Redirecting to a file is the only
# way to see exactly what goes wrong. 
# Fuck you gradle. With a cactus
alias gwb='$(groot)/gradlew build > /tmp/gradle-build.txt 2>&1'
alias gw='$(groot)/gradlew'
# }}}
if [ -f "${DOTFILES_HOME}/scripts/homelab.zsh" ]; then
    source "${DOTFILES_HOME}/scripts/homelab.zsh"
fi
# vim:ft=zsh
